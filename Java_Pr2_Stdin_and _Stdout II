In this challenge, you must read an integer, a double, and a String from stdin, then print the values according to the instructions in the Output Format section below. To make the problem a little easier, a portion of the code is provided for you in the editor.

Note: We recommend completing Java Stdin and Stdout I before attempting this challenge.

Input Format

There are three lines of input:

The first line contains an integer.
The second line contains a double.
The third line contains a String.
Output Format

There are three lines of output:

On the first line, print String: followed by the unaltered String read from stdin.
On the second line, print Double: followed by the unaltered double read from stdin.
On the third line, print Int: followed by the unaltered integer read from stdin.
To make the problem easier, a portion of the code is already provided in the editor.

Sample Input

42
3.1415
Welcome to HackerRank's Java tutorials!
Sample Output

String: Welcome to HackerRank's Java tutorials!
Double: 3.1415
Int: 42

CODE HERE:
import java.util.Scanner;

public class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int i = scan.nextInt();
        double d=scan.nextDouble();
        scan.nextLine();
        String s=scan.nextLine();


        System.out.println("String: " + s);
        System.out.println("Double: " + d);
        System.out.println("Int: " + i);
    }
}

*********************************************************************************************************************
Note: If you use the nextLine() method immediately following the nextInt() method, recall that nextInt() reads integer tokens;
because of this, the last newline character for that line of integer input is still queued in the input buffer and the next nextLine() will be reading the remainder of the integer line (which is empty).

This issue arises due to how Java handles input with Scanner. When you use nextInt(), it reads only the integer from the input but doesn't consume the newline character (\n) that is generated when the user presses Enter. As a result, when you then use nextLine(), it reads that leftover newline character and considers it as the input.

Here’s a step-by-step explanation with an example:
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Step 1: Reading an integer
        System.out.print("Enter your age: ");
        int age = scanner.nextInt();

        // Step 2: Trying to read a line (string)
        System.out.print("Enter your name: ");
        String name = scanner.nextLine();  // This will not work as expected

        System.out.println("Your age is: " + age);
        System.out.println("Your name is: " + name);
    }
}
Explanation:
Step 1: You enter your age (e.g., 25) and press Enter. nextInt() reads the 25 but leaves the newline (\n) in the input buffer.

Step 2: When you try to read a line of text using nextLine(), it immediately reads the leftover newline (\n) from the input buffer. This makes name an empty string.

Solution:
To solve this issue, you need to consume the leftover newline after calling nextInt() by adding an extra nextLine() before reading the actual line input. This extra nextLine() consumes the newline character that was left in the buffer.

Here’s the corrected code:
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Step 1: Reading an integer
        System.out.print("Enter your age: ");
        int age = scanner.nextInt();

        // Consume the leftover newline
        scanner.nextLine();

        // Step 2: Now safely read the line input
        System.out.print("Enter your name: ");
        String name = scanner.nextLine();

        System.out.println("Your age is: " + age);
        System.out.println("Your name is: " + name);
    }
}
Summary:
nextInt() reads an integer but leaves the newline character (\n) in the buffer.
When you immediately follow nextInt() with nextLine(), the nextLine() reads the leftover newline and not the actual string you expect.
To fix this, insert an extra nextLine() after nextInt() to consume the leftover newline before reading the actual string input.


